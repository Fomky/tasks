package org.fomky.tasks.task.controller;import org.fomky.tasks.core.controller.Controllers;import org.fomky.tasks.core.entity.BaseReq;import org.fomky.tasks.core.entity.Res;import org.fomky.tasks.core.utils.JSONUtil;import org.fomky.tasks.task.core.TaskExecute;import org.fomky.tasks.task.entity.JobInfo;import org.fomky.tasks.task.entity.TaskModel;import org.fomky.tasks.task.service.TaskService;import org.springframework.stereotype.Controller;import ratpack.handling.Chain;import ratpack.handling.Handler;import javax.annotation.Resource;import static ratpack.jackson.Jackson.fromJson;import static ratpack.jackson.Jackson.json;/** * @author Created by Fomky on 2017/3/3015:59. */@Controllerpublic class TaskController extends Controllers {    @Resource    private TaskExecute taskExecute;    @Resource    private TaskService taskService;    public void run(Chain chain) throws Exception {        super.execute(chain);        chain.prefix("task", prefix -> {            prefix.post("list", list())                    .post("add", add())                    .post("base", base())                    .post("delete", delete())                    .post("edit", edit())                    .post("findLogs", findLogs())                    .post("scheduler", scheduler());        });    }    /**     * 查询 - 日志     */    private Handler findLogs(){        return context -> context.parse(fromJson(BaseReq.class)).then(baseReq -> {            context.render(json(taskService.findAllLog(baseReq.getId(),baseReq.getStart())));        });    }    private Handler list() {        return context -> {            context.render(JSONUtil.toJSON(taskExecute.list()));        };    }    private Handler scheduler() {        return context -> {            context.render(json(taskExecute.scheduler()));        };    }    private Handler add() {        return context -> context.parse(fromJson(TaskModel.class)).then(req -> {            if(!taskService.findTaskExits(req.getName(),req.getGroup())){                //保存任务                taskExecute.saveTask(req);                taskExecute.taskRepeatForever(req);                context.render(json(new Res()));            }else {                context.render(json(new Res(600,"此任务已经存在了")));            }        });    }    private Handler edit() {        return context -> context.parse(fromJson(TaskModel.class)).then(task -> {            taskExecute.update(task);            taskService.updateTask(task);            context.render(json(new Res()));        });    }    private Handler delete() {        return context -> context.parse(fromJson(JobInfo.class)).then(info -> {            taskService.deleteTask(info.getTask());            taskExecute.deleteTask(info);            context.render(json(new Res()));        });    }    private Handler base() {        return context -> {            context.render(json(taskExecute.findAllBaseTask()));        };    }}